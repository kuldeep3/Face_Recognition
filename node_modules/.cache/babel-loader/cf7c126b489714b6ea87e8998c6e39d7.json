{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar axios = require('axios');\n\nvar _require = require('./constants'),\n    API = _require.API,\n    replaceVars = _require.replaceVars;\n\nvar WORKFLOWS_PATH = API.WORKFLOWS_PATH,\n    WORKFLOW_PATH = API.WORKFLOW_PATH,\n    WORKFLOW_RESULTS_PATH = API.WORKFLOW_RESULTS_PATH;\n\nvar _require2 = require('./utils'),\n    wrapToken = _require2.wrapToken,\n    formatInput = _require2.formatInput;\n\nvar _require3 = require('./helpers'),\n    checkType = _require3.checkType;\n/**\n * class representing a workflow\n * @class\n */\n\n\nvar Workflow = function () {\n  function Workflow(_config) {\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Workflow);\n\n    this._config = _config;\n    this.rawData = rawData;\n    this.id = rawData.id;\n    this.createdAt = rawData.created_at || rawData.createdAt;\n    this.appId = rawData.app_id || rawData.appId;\n  }\n  /**\n   * @deprecated\n   */\n\n\n  _createClass(Workflow, [{\n    key: 'create',\n    value: function create(workflowId, config) {\n      var url = '' + this._config.basePath + WORKFLOWS_PATH;\n      var modelId = config.modelId;\n      var modelVersionId = config.modelVersionId;\n      var body = {\n        workflows: [{\n          id: workflowId,\n          nodes: [{\n            id: 'concepts',\n            model: {\n              id: modelId,\n              model_version: {\n                id: modelVersionId\n              }\n            }\n          }]\n        }]\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, body, {\n            headers: headers\n          }).then(function (response) {\n            var workflowId = response.data.workflows[0].id;\n            resolve(workflowId);\n          }, reject);\n        });\n      });\n    }\n    /**\n     * @deprecated\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete(workflowId, config) {\n      var url = '' + this._config.basePath + replaceVars(WORKFLOW_PATH, [workflowId]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.delete(url, {\n            headers: headers\n          }).then(function (response) {\n            var data = response.data;\n            resolve(data);\n          }, reject);\n        });\n      });\n    }\n    /**\n     * Returns workflow output according to inputs\n     * @param {string}                   workflowId    Workflow id\n     * @param {object[]|object|string}   inputs    An array of objects/object/string pointing to an image resource. A string can either be a url or base64 image bytes. Object keys explained below:\n     *    @param {object}                  inputs[].image     Object with keys explained below:\n     *       @param {string}                 inputs[].image.(url|base64)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n     */\n\n  }, {\n    key: 'predict',\n    value: function predict(workflowId, inputs) {\n      var url = '' + this._config.basePath + replaceVars(WORKFLOW_RESULTS_PATH, [workflowId]);\n\n      if (checkType(/(Object|String)/, inputs)) {\n        inputs = [inputs];\n      }\n\n      return wrapToken(this._config, function (headers) {\n        var params = {\n          inputs: inputs.map(formatInput)\n        };\n        return new Promise(function (resolve, reject) {\n          axios.post(url, params, {\n            headers: headers\n          }).then(function (response) {\n            var data = response.data;\n            resolve(data);\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Workflow;\n}();\n\nmodule.exports = Workflow;","map":null,"metadata":{},"sourceType":"script"}